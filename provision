#!/usr/bin/env bash
set -o pipefail

# we need this in every script
this_script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# globals
SUPPORTED_LINUX_DISTROS='|arch|debian|redhat|'  # (currently unused)

# other variables
dry_run=0
filter=""
workflow="install"
run_test_only=0
run_script_only=0

# --- logging helpers ---------------------------------------------------------
log() {
  local GREEN='\033[0;32m'
  local NOCOL='\033[0m'
  if [[ $dry_run -eq 1 ]]; then
    printf "${GREEN}[DRY_RUN]${NOCOL} %b\n" "$*"
  else
    printf "%b\n" "$*"
  fi
}

log_error() {
  local RED='\033[0;31m'
  local NOCOL='\033[0m'
  printf "${RED}[ERROR]${NOCOL} %b\n" "$*" 1>&2
}

execute() {
  log "Executing: $*"
  if [[ $dry_run -eq 1 ]]; then
    return 0
  fi
  "$@"
}

usage() {
  cat <<EOF
Usage: $0 [options]

Options:
  -d, --dry-run            Print actions without executing.
  -w, --workflow NAME      Workflow name (default: install).
  -f, --filter LIST        Comma-separated list of script names to run (exact match).
  -t, --run-tests-only      Run tests only.
  -s, --run-scripts-only    Run scripts only.
  -h, --help               Show this help.

Notes:
- Workflow file must exist at: provisions/workflows/<workflow>.sh
- Entries in workflow file are relative paths under 'provisions/', e.g. 'setup/os.sh'
- Matching test file is: provisions/tests/test_<entry>
EOF
}

# --- arg parsing -------------------------------------------------------------
while [[ $# -gt 0 ]]; do
  case "$1" in
    -d|--dry-run)
      dry_run=1; shift ;;
    -f|--filter)
      filter="${2:-}"; shift 2 ;;
    -t|--run-tests-only)
      run_test_only=1; shift ;;
    -s|--run-scripts-only)
      run_script_only=1; shift ;;
    -w|--workflow)
      workflow="${2:-}"; shift 2 ;;
    -h|--help)
      usage; exit 0 ;;
    --) shift; break ;;
    *)
      log_error "Unknown option: $1"
      usage
      exit 2
      ;;
  esac
done

# guard against conflicting flags
if [[ $run_test_only -eq 1 && $run_script_only -eq 1 ]]; then
  log_error "Choose only one of --run-tests-only or --run-scripts-only."
  exit 2
fi

workflow_file="${this_script_dir}/provisions/workflows/${workflow}.sh"
if [[ ! -f "$workflow_file" ]]; then
  log_error "Cannot find workflow file: $workflow_file ... bailing out"
  exit 1
fi

# build filter list (array) from comma-separated string
IFS=',' read -r -a FILTER_LIST <<< "$filter"

in_filter() {
  # returns 0 if the given script name matches the filter (or filter is empty)
  local name="$1"
  if [[ ${#FILTER_LIST[@]} -eq 0 || -z "${FILTER_LIST[*]// }" ]]; then
    return 0
  fi
  local f
  for f in "${FILTER_LIST[@]}"; do
    # exact match against the entry as it appears in the workflow (no path rewriting)
    if [[ "$name" == "$f" ]]; then
      return 0
    fi
  done
  return 1
}

# read non-empty, non-comment lines from workflow file
# shellcheck disable=SC2013
while IFS= read -r line; do
  # trim leading/trailing whitespace
  script_name="$(printf "%s" "$line" | awk '{$1=$1; print}')"
  # skip comments and blank lines
  [[ -z "$script_name" || "$script_name" =~ ^# ]] && continue

  if ! in_filter "$script_name"; then
    log "Skipping (filtered out): $script_name"
    continue
  fi

  script_path="${this_script_dir}/provisions/${script_name}"
  test_path="${this_script_dir}/provisions/tests/test_${script_name}"

  # decide what to run
  do_run_script=1
  do_run_test=1
  if [[ $run_test_only -eq 1 ]]; then
    do_run_script=0
  elif [[ $run_script_only -eq 1 ]]; then
    do_run_test=0
  fi

  # checks
  if [[ $do_run_script -eq 1 && ! -x "$script_path" ]]; then
    if [[ -f "$script_path" ]]; then
      log "Making script executable: $script_path"
      execute chmod +x "$script_path"
    else
      log_error "Script not found: $script_path"
      # if only running scripts, fail fast; otherwise continue to allow tests
      [[ $do_run_test -eq 0 ]] && exit 1
      do_run_script=0
    fi
  fi

  if [[ $do_run_test -eq 1 && ! -x "$test_path" ]]; then
    if [[ -f "$test_path" ]]; then
      log "Making test executable: $test_path"
      execute chmod +x "$test_path"
    else
      log_error "Test not found: $test_path"
      # if only running tests, fail; otherwise continue to run script
      [[ $do_run_script -eq 0 ]] && exit 1
      do_run_test=0
    fi
  fi

  # execute in order: script then test (unless flags change that)
  if [[ $do_run_script -eq 1 ]]; then
    execute "$script_path"
  fi

  if [[ $do_run_test -eq 1 ]]; then
    execute "$test_path"
  fi

done < <(awk 'NF && $1 !~ /^#/' "$workflow_file")


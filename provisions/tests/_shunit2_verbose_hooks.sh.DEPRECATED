# _shunit2_verbose_hooks.sh
# Verbose per-test output for shUnit2 using a generated suite().
# Prints RUN/PASS/FAIL/SKIP with duration and prevents phantom global 'skipped' increments.

if [[ -t 1 && "${NO_COLOR:-}" != "1" ]]; then
  __shvh_G=$'\033[0;32m'; __shvh_R=$'\033[0;31m'; __shvh_B=$'\033[0;34m'; __shvh_Y=$'\033[1;33m'; __shvh_N=$'\033[0m'
else
  __shvh_G=""; __shvh_R=""; __shvh_B=""; __shvh_Y=""; __shvh_N=""
fi

shunit2_enable_verbose_suite() {
  # Don’t override an existing suite()
  declare -F suite >/dev/null 2>&1 && return 0

  suite() {
    local f
    while read -r _ _ f _; do
      [[ $f == test* ]] || continue

      eval "
shvh_run_${f}() {
  # silence xtrace inside wrapper
  local __had_xtrace=
  case \$- in *x*) __had_xtrace=1; set +x ;; esac

  # Reset per-test flags/counters so stale state can’t leak in
  __shunit_skip=0
  __shunit_testSuccess=0
  __shunit_assertsCurrentTest=0
  local __skips_before=\${__shunit_testsSkipped:-0}

  local __start=\$SECONDS
  printf '>>> RUN: %s%s%s\n' \"${__shvh_B}\" \"${f}\" \"${__shvh_N}\"

  local __rc=0
  ${f}
  __rc=\$?

  # Snapshot shUnit2 state
  local __ok=\${__shunit_testSuccess:-0}
  local __asserts=\${__shunit_assertsCurrentTest:-0}
  local __skip_flag=\${__shunit_skip:-0}
  local __dur=\$(( SECONDS - __start ))

  # If nothing actually asked to skip but global skipped counter bumped, undo it.
  if [[ \$__skip_flag -eq 0 && \${__shunit_testsSkipped:-0} -gt \$__skips_before ]]; then
    __shunit_testsSkipped=\$__skips_before
  fi

  if [[ \$__skip_flag -eq 1 ]]; then
    printf '>>> %sSKIP%s: %s (%ss)\n' \"${__shvh_Y}\" \"${__shvh_N}\" \"${f}\" \"\$__dur\"
    :
  elif [[ \$__rc -ne 0 ]]; then
    printf '>>> %sFAIL%s: %s (%ss) [rc=%s]\n' \"${__shvh_R}\" \"${__shvh_N}\" \"${f}\" \"\$__dur\" \"\$__rc\"
    fail \"${f}: test body returned non-zero (\$__rc)\"
  elif [[ \$__asserts -eq 0 ]]; then
    printf '>>> %sFAIL%s: %s (%ss) [no assertions]\n' \"${__shvh_R}\" \"${__shvh_N}\" \"${f}\" \"\$__dur\"
    fail \"${f}: no assertions executed\"
  elif [[ \$__ok -eq 0 ]]; then
    printf '>>> %sPASS%s: %s (%ss)\n' \"${__shvh_G}\" \"${__shvh_N}\" \"${f}\" \"\$__dur\"
  else
    printf '>>> %sFAIL%s: %s (%ss)\n' \"${__shvh_R}\" \"${__shvh_N}\" \"${f}\" \"\$__dur\"
    # shUnit2 already marked the failure via assertions
  fi

  [[ -n \$__had_xtrace ]] && set -x
  return 0
}
"
      suite_addTest "shvh_run_${f}"
    done < <(declare -F)
  }
}

